apiVersion: v1
data:
  haproxy.cfg: |
    global
      log 127.0.0.1 local0 debug
      maxconn 200

    defaults
      log global
      mode http
      option httplog
      timeout connect 10000
      timeout client  60000
      timeout server  60000

    listen myapp
      bind *:{{ .Values.web.servicePort }}
      mode http


      acl is_streaming path -i -m beg /api/v1/streaming
      acl is_static    path -i -m beg /system/media_attachments
      acl is_static    path -i -m beg /system/cache

      use-server stream-be if is_streaming
      server stream-be {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.streaming.name }}.mastodon.svc.cluster.local:{{ .Values.streaming.servicePort }} weight 0

      use-server static-be if is_static
      server static-be {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.httpd.name }}.mastodon.svc.cluster.local:{{ .Values.httpd.servicePort }} weight 0

      server web-be {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.web.name }}.mastodon.svc.cluster.local:{{ .Values.web.servicePort }}


      option forwardfor




kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
  namespace: dmz
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-dmzproxy
  namespace: dmz
  labels:
    app: haproxy
    site: {{ .Release.Name }}-{{ .Chart.Name }}
spec:
  selector:
    matchLabels:
      app: haproxy
      site: {{ .Release.Name }}-{{ .Chart.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: haproxy
        site: {{ .Release.Name }}-{{ .Chart.Name }}
    spec:
      tolerations:
      - key: "CPUPower"
        operator: "Equal"
        value: "Limited"
        effect: "NoExecute"
      imagePullSecrets:
      - name: gitlab-private-registry
      containers:
      - name: dmzproxy
        image: registry.gitlab.com/snowgoons/kubernetes/dmz-proxy:latest
        imagePullPolicy: Always
        volumeMounts:
        - name: haproxy-cfg-file
          mountPath: /usr/local/etc/haproxy
        ports:
        - containerPort: {{ .Values.web.servicePort }}
        # Annoyingly, I can't use an HTTP liveness probe because the
        # HTTP-to-HTTPS redirect that Mastodon returns breaks it...
        livenessProbe:
          tcpSocket:
            port: {{ .Values.web.servicePort }}
          failureThreshold: 3
          periodSeconds: 10
        startupProbe:
          tcpSocket:
            port: {{ .Values.web.servicePort }}
          failureThreshold: 30
          periodSeconds: 10
        securityContext:
          capabilities:
            add:
              - NET_ADMIN
        env:
        - name: NGINX_EGRESS_RATE
          value: "2mbit burst 32kbit latency 400ms"

      volumes:
      - name: haproxy-cfg-file
        configMap:
          name: {{ .Release.Name }}-{{ .Chart.Name }}-configmap
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-dmz
  namespace: dmz
spec:
  selector:
    app: haproxy
    site: {{ .Release.Name }}-{{ .Chart.Name }}
  ports:
  - name: {{ .Release.Name }}-{{ .Chart.Name }}
    protocol: "TCP"
    port: {{ .Values.web.servicePort }}
    targetPort: {{ .Values.web.servicePort }}
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mastodon-cloudflared
  namespace: dmz
  labels:
    app: cloudflared
    site: {{ template "web.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudflared
      site: {{ template "web.fullname" . }}
  template:
    metadata:
      labels:
        app: cloudflared
        site: {{ template "web.fullname" . }}
    spec:
      containers:
      - name: cloudflared
        image: cloudflare/cloudflared:2021.4.0
        args: [ "tunnel", "--no-autoupdate", "run", "--url", "{{ .Release.Name }}-{{ .Chart.Name }}-dmz.dmz.svc.cluster.local:{{ .Values.web.servicePort }}", "bdd47e01-95e8-48cd-aa60-98c457827ecd" ]
        volumeMounts:
        - name: cloudflared-config
          mountPath: /etc/cloudflared
          readOnly: true
      volumes:
      - name: cloudflared-config
        secret:
          secretName: mastodon-cloudflared-secret
